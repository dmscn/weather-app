{"version":3,"sources":["Components/UI/TextField/TextField.module.css","Components/UI/Button/Button.module.css","Components/ResultScreen/ResultScreen.module.css","Components/ResultScreen/OtherInfo/OtherInfo.module.css","Components/ResultScreen/MainInfo/MainInfo.module.css","Components/LoadingScreen/LoadingScreen.tsx","Components/UI/TextField/TextField.tsx","Components/UI/Button/Button.tsx","Components/SearchScreen/SearchScreen.tsx","Components/ResultScreen/HeaderInfo/HeaderInfo.tsx","Components/ResultScreen/MainInfo/MainInfo.tsx","Components/ResultScreen/OtherInfo/OtherInfo.tsx","Components/ResultScreen/ResultScreen.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/ResultScreen/HeaderInfo/HeaderInfo.module.css","Components/LoadingScreen/LoadingScreen.module.css","Components/SearchScreen/SearchScreen.module.css"],"names":["module","exports","Container","Icon","weatherBox","WeatherTitle","Temperature","MainTemperature","LoadingScreen","react_default","a","createElement","className","styles","Input_default","disabled","Input","value","this","props","location","inputProps","aria-label","CircularProgress_default","Component","UITextField","_this$props","rest","Object","objectWithoutProperties","classNames","TextField_default","assign","fullWidth","UIButton","children","Button_default","color","variant","SearchScreen","state","text","handleOnChange","event","_this","setState","target","onSubmit","TextField_UITextField","autoFocus","TextField","id","label","placeholder","onChange","Button_UIButton","type","onClick","moment","locale","HeaderInfo","Header","concat","name","country","Subtitle","format","MainInfo","setIcon","weatherId","icon","formatTemperature","temp","toFixed","toString","substr","weather","tempMin","tempMax","_","startCase","toLower","OtherInfo","formatTime","time","Date","humidity","sunrise","sunset","ResultScreen","data","HeaderInfo_HeaderInfo","city","MainInfo_MainInfo","list","description","main","temp_max","temp_min","OtherInfo_OtherInfo","sys","WEATHER_API_BASE_URL","APPID","App","undefined","loading","weatherData","locationSubmit","_callee","result","regenerator_default","wrap","_context","prev","next","axios","get","sent","console","log","objectSpread","t0","stop","_this$state","ResultScreen_ResultScreen","LoadingScreen_LoadingScreen","SearchScreen_SearchScreen","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","Button"],"mappings":"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","file":"static/js/main.f878ba8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"TextField_Container__1CrSF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Button_Container__3lL_e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ResultScreen_Container__111sF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"OtherInfo_Container__qaHr8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MainInfo_Container__1zQjB\",\"Icon\":\"MainInfo_Icon__1Z1Uf\",\"weatherBox\":\"MainInfo_weatherBox__19Wwe\",\"WeatherTitle\":\"MainInfo_WeatherTitle__2Gh4T\",\"Temperature\":\"MainInfo_Temperature__1JZUB\",\"MainTemperature\":\"MainInfo_MainTemperature__GO7Qj\"};","import React, { Component } from 'react'\nimport Input from '@material-ui/core/Input';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport styles from './LoadingScreen.module.css'\n\nexport interface Props {\n  location: string,\n}\nexport default class LoadingScreen extends Component<Props> {\n  render(): JSX.Element {\n    return (\n      <section className={styles.Container}>\n        <Input\n          disabled\n          className={styles.Input}\n          value={this.props.location}\n          inputProps={{\n            'aria-label': 'Location',\n          }}\n        />\n        <CircularProgress />\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport TextField from '@material-ui/core/TextField';\n\nimport styles from './TextField.module.css';\n\nexport default class UITextField extends Component<any> {\n  render() {\n    const { className = \"\", ...rest } = this.props;\n    return (\n      <div className={classNames(styles.Container, this.props.className)}>\n        <TextField\n          fullWidth\n          {...rest}\n        />\n      </div>\n    )\n  }\n}\n","import React, { Component, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport Button from '@material-ui/core/Button';\n\nimport styles from './Button.module.css';\n\nexport default class UIButton extends Component<any> {\n  render() {\n    const { className = \"\", children, ...rest } = this.props;\n    return (\n      <div className={classNames(styles.Container, this.props.className)}>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          {...rest}\n        >\n          {children}\n        </Button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport TextField from '../UI/TextField';\nimport Button from '../UI/Button';\n\nimport styles from './SearchScreen.module.css';\n\nexport interface Props {\n  onSubmit: (location: string) => void;\n}\n\nexport interface State {\n  text: string,\n}\n\nexport default class SearchScreen extends Component<Props, State> {\n  state = {\n    text: '',\n  }\n\n  handleOnChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ text: event.target.value });\n  }\n\n  onSubmit = (): void => {\n    this.props.onSubmit(this.state.text);\n  }\n\n  render(): JSX.Element {\n    const { text } = this.state;\n    return (\n      <main className={styles.Container}>\n        <form onSubmit={this.onSubmit}>\n          <TextField\n            autoFocus\n            className={styles.TextField}\n            id=\"LocationInput\"\n            label=\"Location\"\n            placeholder=\"Location\"\n            value={text}\n            onChange={this.handleOnChange}\n            inputProps={{\n              'aria-label': 'Search Box',\n            }}\n          />\n          <Button\n            type=\"submit\"\n            onClick={this.onSubmit}\n          >\n            Search\n          </Button>\n        </form>\n      </main>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport moment from 'moment';\nimport 'moment/min/locales';\n\nimport styles from './HeaderInfo.module.css';\n\nmoment.locale('pt-br');\n\nexport interface Props {\n  location: {\n    name: string,\n    country: string,\n  },\n}\n\nexport default class HeaderInfo extends Component<Props> {\n  render(): JSX.Element {\n    const { location } = this.props;\n    return (\n      <section className={styles.Container}>\n        <h1 className={styles.Header}>{`${location.name}, ${location.country}`}</h1>\n        <h4 className={styles.Subtitle}>{moment().format('LLLL')}</h4>\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport _ from 'lodash';\n\nimport '../../../static/weather-icons/css/weather-icons.min.css';\nimport styles from './MainInfo.module.css';\n\nexport interface Props {\n  weatherId: number,\n  weather: string,\n  temp: number,\n  tempMin: number,\n  tempMax: number,\n}\n\nexport default class MainInfo extends Component<Props> {\n\n  setIcon = (): JSX.Element => {\n    const { weatherId } = this.props;\n    const icon: string = `wi wi-owm-${weatherId}`;\n    return <i className={classNames(icon, styles.Icon)}></i>\n  }\n\n  formatTemperature = (temp: number): string => {\n    return temp.toFixed(0).toString().substr(0,2) + 'ºC';\n  }\n\n  render(): JSX.Element {\n    const { weather, temp, tempMin, tempMax } = this.props;\n    return (\n      <section className={styles.Container}>\n        <div className={styles.weatherBox}>\n          Mínima\n          <h4 className={styles.Temperature}>{this.formatTemperature(tempMin)}</h4>\n        </div>\n\n        <div className={styles.weatherBox}>\n          {this.setIcon()}\n          <h4 className={classNames(styles.Temperature, styles.MainTemperature)}>{this.formatTemperature(temp)}</h4>        \n          <h4 className={styles.WeatherTitle}>{_.startCase(_.toLower(weather))}</h4>\n        </div>\n\n        <div className={styles.weatherBox}>\n          Máxima\n          <h4 className={styles.Temperature}>{this.formatTemperature(tempMax)}</h4>\n        </div>\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport moment from 'moment';\n\nimport styles from './OtherInfo.module.css';\n\nexport interface Props {\n  humidity: number,\n  sunrise: number,\n  sunset: number,\n}\n\nexport default class OtherInfo extends Component<Props> {\n\n  formatTime = (time: number): string => {\n    return moment(new Date(time * 1000)).format('LT');\n  }\n  \n  render(): JSX.Element {\n    const { humidity, sunrise, sunset } = this.props;\n\n    return (\n      <section className={styles.Container}>\n        <h4>Umidade: {humidity}%</h4>\n        <h4>Nascer do Sol: {this.formatTime(sunrise)}</h4>\n        <h4>Pôr do Sol: {this.formatTime(sunset)}</h4>\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport moment from 'moment';\n\nimport styles from './ResultScreen.module.css';\nimport HeaderInfo from './HeaderInfo';\nimport MainInfo from './MainInfo';\nimport OtherInfo from './OtherInfo';\n\nmoment.locale('pt-BR');\nexport interface Props {\n  data: any,\n}\n\nexport default class ResultScreen extends Component<Props> {\n  render(): JSX.Element {\n    const { data } = this.props;\n    return (\n      <main className={styles.Container}>\n        <HeaderInfo location={{ name: data.name, country: data.city.country }} />\n        <MainInfo \n          weatherId={data.weather[0].id}\n          weather={data.list[0].weather[0].description}\n          temp={data.main.temp}\n          tempMax={data.main.temp_max}\n          tempMin={data.main.temp_min}\n        />\n        <hr />\n        <OtherInfo humidity={data.main.humidity} sunrise={data.sys.sunrise} sunset={data.sys.sunset} />\n      </main>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport LoadingScreen from './Components/LoadingScreen';\nimport SearchScreen from './Components/SearchScreen';\nimport ResultScreen from './Components/ResultScreen';\n\nconst WEATHER_API_BASE_URL = \"https://api.openweathermap.org/data/2.5\"\nconst APPID = \"638a471aca7521703a926ad9c4c08eec\"\n\nexport interface State {\n  location?: string,\n  loading: boolean,\n  weatherData?: any,\n}\nexport default class App extends Component<any, State> {\n  state = {\n    location: undefined,\n    loading: false,\n    weatherData: undefined,\n  }\n\n  locationSubmit = async (location: string): Promise<any> => {\n    await this.setState({location, loading: true});\n    try {\n      const result: any = (await axios.get(`${WEATHER_API_BASE_URL}/weather?q=${location}&APPID=${APPID}`)).data;\n      const description: any = (await axios.get(`${WEATHER_API_BASE_URL}/forecast?id=${result.id}&APPID=${APPID}&lang=pt`)).data;\n      console.log('Response from Open Weather: ', { ...result, ...description });\n      this.setState({ \n        weatherData: { \n          ...result,\n          ...description,\n        },\n        loading: false,\n      });\n    } catch(err) {\n      this.setState({loading: false});\n    }\n  }\n  \n  render(): JSX.Element {\n    const { location, loading, weatherData } = this.state;\n\n    if(weatherData) return <ResultScreen data={weatherData} /> \n    if(loading && location) return <LoadingScreen location={location}/>;\n    return <SearchScreen onSubmit={this.locationSubmit}/>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"HeaderInfo_Container__2iQKx\",\"Header\":\"HeaderInfo_Header__2V_Li\",\"Subtitle\":\"HeaderInfo_Subtitle__3uIty\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LoadingScreen_Container__R1Vjg\",\"Input\":\"LoadingScreen_Input__2HBTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"SearchScreen_Container__1aeni\",\"TextField\":\"SearchScreen_TextField__3gl3c\",\"Button\":\"SearchScreen_Button__1l5ET\"};"],"sourceRoot":""}
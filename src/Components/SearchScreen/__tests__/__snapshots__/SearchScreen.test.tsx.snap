// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SearchScreen /> renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchScreen />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <TextField
          inputProps={
            Object {
              "aria-label": "Search Box",
            }
          }
          label="Location"
          onChange={[Function]}
          placeholder="Location"
          required={false}
          select={false}
          value=""
          variant="standard"
        />,
        <WithStyles(Button)
          className="Button"
          onClick={[Function]}
        >
          Search
        </WithStyles(Button)>,
      ],
      "className": "Container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "inputProps": Object {
            "aria-label": "Search Box",
          },
          "label": "Location",
          "onChange": [Function],
          "placeholder": "Location",
          "required": false,
          "select": false,
          "value": "",
          "variant": "standard",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Search",
          "className": "Button",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Search",
        "type": [Function],
      },
    ],
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <TextField
            inputProps={
              Object {
                "aria-label": "Search Box",
              }
            }
            label="Location"
            onChange={[Function]}
            placeholder="Location"
            required={false}
            select={false}
            value=""
            variant="standard"
          />,
          <WithStyles(Button)
            className="Button"
            onClick={[Function]}
          >
            Search
          </WithStyles(Button)>,
        ],
        "className": "Container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "inputProps": Object {
              "aria-label": "Search Box",
            },
            "label": "Location",
            "onChange": [Function],
            "placeholder": "Location",
            "required": false,
            "select": false,
            "value": "",
            "variant": "standard",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Search",
            "className": "Button",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Search",
          "type": [Function],
        },
      ],
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
